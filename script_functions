#!/usr/bin/env bash

# (c) /u/supert 2016
# released under MIT licence

# common functions for btc info scripts

# requires geoip-bin package to be installed
test -z $(which bitcoin-cli) && echo "$(basename $0) requires bitcoin-cli to be installed."
test -z $(which jq) && echo "$(basename $0) requires jq to be installed."
test -z $(which bc) && echo "$(basename $0) requires bc to be installed."

function sum {
    echo "$@" | sed -e's/ /+/' | bc
}

function get_field {
    # get relevant bits of json file
    jq -r ".[] | .$1" "$2" | sed -e 's/ /~/'
}

function get_location {
    test -z $(which geoiplookup) && echo "$(basename $0) requires geiop-bin to be installed."
    # gets locations from list of IPs
    IPS=$(cat $1)
    for IP in $IPS
    do
        HOST=$(geoiplookup $IP | sed -e 's/.*, //' | sed -e 's/ /~/g')
        echo $HOST
    done
}

function get_host {
    test -z $(which host) && echo "$(basename $0) requires host to be installed."
    # gets locations from list of IPs
    IPS=$(cat $1)
    for IP in $IPS
    do
        HOST=$(host $IP | sed -e 's/.* //' -e 's/\.$//')
        echo $HOST
    done
}

function multi_join {
    # joins multiple files by row number
    TMP=/tmp/multi_join-$RANDOM.tmp
    TMP2=/tmp/multi_join-$RANDOM.tmp
    (seq 1 1000) > $TMP
    for FILE in "$@"
    do
        cp $TMP $TMP2
        join $TMP2 <(nl $FILE) > $TMP
    done
    cat $TMP
    rm $TMP $TMP2
}

function get_coinbase_signal {
    # determine EB/AD from coinbase string
    # decode hex string
    test -z $(which xxd) && echo "$(basename $0) requires xxd to be installed."
    test -z $(which perl) && echo "$(basename $0) requires perl to be installed."
    CB=$(echo "$1" | xxd -r -p | tr -d '\0')
    EBAD=
    # determine support for BIPs etc
    [[ "$CB" =~ 'EB' ]]                 && EBAD="$EBAD""$(echo $CB | perl -ne 'print $1 if /.*(EB[0-9]+).*/') "
    [[ "$CB" =~ 'AD' ]]                 && EBAD="$EBAD""$(echo $CB | perl -ne 'print $1 if /.*(AD[0-9]+).*/') "
    [[ "$CB" =~ '8M' ]]                 && EBAD="$EBAD""8MB "
    [[ "$CB" =~ 'Big Blocks' ]]         && EBAD="$EBAD""Big Blocks "
    [[ "$CB" =~ 'BIP100' ]]             && EBAD="$EBAD""BIP100 "
    [[ "$CB" =~ 'BIP101' ]]             && EBAD="$EBAD""BIP101 "
    [[ "$CB" =~ 'BIP109' ]]             && EBAD="$EBAD""BIP109 "
    [[ "$CB" =~ 'SEGWIT' ]]             && EBAD="$EBAD""SEGWIT "
    printf '%-17s' "$EBAD"
}

function get_coinbase_miner {
    # determine miner from coinbase string
    # works well for now, could also use blockchain.info's list in pools folder
    # decode hex string
    test -z $(which xxd) && echo "$(basename $0) requires xxd to be installed."
    CB=$(echo "$1" | xxd -r -p | tr -d '\0')
    MINER=
    [[ "$CB" =~ '7七彩神仙鱼' ]]        && MINER="$MINER""7七彩神仙鱼 "
    [[ "$CB" =~ 'AntPool' ]]            && MINER="$MINER""AntPool "
    [[ "$CB" =~ 'Eligius' ]]            && MINER="$MINER""Eligius "
    [[ "$CB" =~ 'pool.bitcoin.com' ]]   && MINER="$MINER""bitcoin.com "
    [[ "$CB" =~ 'π' ]]                  && MINER="$MINER""π "
    [[ "$CB" =~ 'zhangwei888' ]]        && MINER="$MINER""zhangwei888 "
    [[ "$CB" =~ 'Telco 214' ]]          && MINER="$MINER""Telco "
    [[ "$CB" =~ 'ViaBTC' ]]             && MINER="$MINER""ViaBTC "
    [[ "$CB" =~ 'BitFury' ]]            && MINER="$MINER""BitFury "
    [[ "$CB" =~ 'Bitfury' ]]            && MINER="$MINER""Bitfury "
    [[ "$CB" =~ 'BTC.COM' ]]            && MINER="$MINER""BTC.COM "
    [[ "$CB" =~ 'BTC.TOP' ]]            && MINER="$MINER""BTC.TOP "
    [[ "$CB" =~ 'BW Pool' ]]            && MINER="$MINER""BW "
    [[ "$CB" =~ 'fisher' ]]             && MINER="$MINER""fisher "
    [[ "$CB" =~ 'jinxin' ]]             && MINER="$MINER""jinxin "
    [[ "$CB" =~ 'chuan' ]]              && MINER="$MINER""chuan "
    [[ "$CB" =~ 'rasgbonyo' ]]          && MINER="$MINER""rasgbonyo "
    [[ "$CB" =~ 'ligengyin' ]]          && MINER="$MINER""ligengyin "
    [[ "$CB" =~ 'BTCC' ]]               && MINER="$MINER""BTCC "
    [[ "$CB" =~ 'CANOE' ]]              && MINER="$MINER""Canoe "
    [[ "$CB" =~ 'BATPOOL' ]]            && MINER="$MINER""BATPOOL "
    [[ "$CB" =~ '******' ]]             && MINER="$MINER""Telco 214 "
    [[ "$CB" =~ 'BitMinter' ]]          && MINER="$MINER""BitMinter "
    [[ "$CB" =~ 'wyb5218' ]]            && MINER="$MINER""wyb5218 "
    [[ "$CB" =~ 'slush' ]]              && MINER="$MINER""Slush "
    [[ "$CB" =~ 'ckpool' ]]             && MINER="$MINER""ckpool "
    [[ "$CB" =~ 'gbminers' ]]           && MINER="$MINER""GBMiners "
    [[ "$CB" =~ 'by260150' ]]           && MINER="$MINER""by260150 "
    [[ "$CB" =~ 'gaoyuebin' ]]          && MINER="$MINER""gaoyuebin "
    [[ "$CB" =~ 'f2pool' ]]             && MINER="$MINER""f2pool "
    [[ "$CB" =~ 'ninglei' ]]            && MINER="$MINER""ninglei "
    [[ "$CB" =~ 'HaoBTC' ]]             && MINER="$MINER""HaoBTC "
    [[ "$CB" =~ 'BitClub' ]]            && MINER="$MINER""BitClub "
    [[ "$CB" =~ 'lcq19890718' ]]        && MINER="$MINER""lcq19890718 "
    [[ "$CB" =~ 'anshaohua' ]]          && MINER="$MINER""anshaohua "
    [[ "$CB" =~ 'bcy' ]]                && MINER="$MINER""bcy "
    [[ "$CB" =~ 'KnCMiner' ]]           && MINER="$MINER""KnCMiner "
    [[ "$CB" =~ 'weixin' ]]             && MINER="$MINER""weixin "
    [[ "$CB" =~ 'handan' ]]             && MINER="$MINER""handan "
    [[ "$CB" =~ 'eileencwl' ]]          && MINER="$MINER""eileencwl "
    printf '%-20s' "$MINER"
}

### --- txid functions --- ###
function get_tx_output_values {
    # gets output values from txid
    RAWTX=$(bitcoin-cli getrawtransaction $1 1)
    echo $RAWTX | jq '.vout | .[] | .value'
}

function get_tx_input_values {
    # gives sum of inputs from txid
    RAWTX=$(bitcoin-cli getrawtransaction $1 1)
    INPUTS=$(echo $RAWTX | jq -r '.vin | .[] | .txid')
    INPUT_VAL=0.0
    for TX in $INPUTS
    do
        VIN=($(get_tx_output_values $TX))
        # sum over first outputs of input transactions
        INPUT_VAL="$INPUT_VAL ${VIN[0]}"
    done
    echo $INPUT_VAL
}

#function get_tx_fee {
    ## calculate fee as difference between inputs and outputs from txid
    #INPUT_VAL=$(sum $(get_tx_input_values $1))
    #OUTPUT_VAL=$(sum $(get_tx_output_values $1))
    #echo "$INPUT_VAL-$OUTPUT_VAL" | bc
#}
    
function coinbase_str {
    # return coinbase or 0 otherwise from txid
    RAWTX=$(bitcoin-cli getrawtransaction $1 1)
    echo "$(echo $RAWTX | jq -r '.vin | .[] | .coinbase')"
}

function is_coinbase {
    # return coinbase or 0 otherwise from txid
    RAWTX=$(bitcoin-cli getrawtransaction $1 1)
    echo $RAWTX | jq -r '.vin | .[] | .coinbase // false'
}

function get_tx_fee {
    # calculate fee for transactions
    # returns json
    for TXID in "$@"
    do
        if [ $(is_coinbase $TXID) = 'false' ]
        then
            echo '{'
            echo '"txid": "'$TXID'",'
            echo '"is_coinbase": 0,'
            echo '"fee":' $(get_tx_fee $TXID)','
            echo '"value":' $(get_tx_output_values $TXID | paste -sd+ | bc)
            echo '}'
        else
            echo '{'
            echo '"txid": "'$TXID'",'
            echo '"is_coinbase": 1,'
            echo '"coinbase": "'$(coinbase_str $TXID)"\","
            echo '"value":' $(get_tx_output_values $TXID | paste -sd+ | bc)
            echo '}'
        fi
    done
}

function print_block {
    # print block in tabular manner
    BLOCKREWARD=12.5
    HASH="$1"
    BLOCK=/tmp/lastblock-$RANDOM.tmp
    TX=/tmp/tx-$RANDOM.tmp
    bitcoin-cli getblock $HASH > $BLOCK
    HEIGHT=$(cat $BLOCK | jq '.height')
    VERSION=0x$(printf "%08x" $(cat $BLOCK | jq '.version'))
    SIZE=$(printf "%04i" $(( $(cat $BLOCK | jq '.size')/1024 )) )'Kb'
    TXCOUNT=$(printf "%05i" $(cat $BLOCK | jq '.tx' | wc -l) )
    get_tx_fee $(cat $BLOCK | jq -r '.tx | .[0]') > $TX
    COINBASE=$(printf "%0.8f" $(cat $TX | grep -v 'coinbase' | jq '.value' ) )
    MINER=$(get_coinbase_miner $(cat $TX | jq -r '.coinbase') )
    SIGNAL=$(get_coinbase_signal $(cat $TX | jq -r '.coinbase') )
    COINBASE_STR=$(cat $TX | jq -r '.coinbase' | xxd -r -p | tr -d '\0')
    AVE_FEE=$(printf "%.8f" $(echo "($COINBASE - $BLOCKREWARD) / $TXCOUNT " | bc -l))
    TIME=$(cat $BLOCK | jq '.time')
    TIME=$(date --date="@$TIME" $DATEFMT -u)
    echo -e "$HEIGHT~$SIZE~$TXCOUNT~$COINBASE~$AVE_FEE~$VERSION~$TIME~$SIGNAL ~$MINER" | column -t -s'~' | cut -c 1-$(tput cols)
    rm $TX $BLOCK
}

function print_table_header {
    NOHEADER="$@"
    (\
        if [ -z $NOHEADER ]
        then
            echo "height~size  ~#_tx ~coinbase~   fees/tx   ~version   ~time    ~date      ~signal            ~miner";
            echo "------~----  ~---- ~--------~   -------   ~-------   ~----    ~----      ~------            ~-----";
        fi; \
    ) | column -t -s'~'
}

