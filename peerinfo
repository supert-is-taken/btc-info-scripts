#!/usr/bin/env bash

# (c) /u/supert 2016
# release under MIT licence

# show info about connected peers

# requires geoip-bin package to be installed
test -z $(which geoiplookup) && echo "$(basename $0) requires geiop-bin to be installed."
test -z $(which bitcoin-cli) && echo "$(basename $0) requires bitcoin-cli to be installed."
test -z $(which jq) && echo "$(basename $0) requires jq to be installed."

# test for options
HTML=
while getopts hwn: opt
do
    case "$opt" in
    (h) echo "usage: $0 [-w]";;
    (w) HTML=1;;
    esac
done

shift $((OPTIND - 1))

RANDFILE=/tmp/peerinfo-$RANDOM.tmp
bitcoin-cli getpeerinfo > $RANDFILE

GEOFILE=/tmp/peerinfo-geofile-$RANDOM.tmp
CLIENTS=/tmp/peerinfo-clients-$RANDOM.tmp
STARTINGHEIGHT=/tmp/peerinfo-startingheight-$RANDOM.tmp
SYNCED_BLOCKS=/tmp/peerinfo-synced-$RANDOM.tmp
TABLE=/tmp/peerinfo-table-$RANDOM.tmp
OUTFILE=/tmp/peerinfo-out-$RANDOM.tmp

IPS=$(grep 'addr":' $RANDFILE | grep -oE '([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*)')
for IP in $IPS
do
    geoiplookup $IP | sed -e 's/.*, /%/' >> $GEOFILE
done

# get relevant bits of json reply
nl <(grep 'subver' $RANDFILE | sed -e 's/ *//' -e 's/.*: \"\//%/' -e 's/\/\"//' -e 's/,//' -e 's/:/%/') > $CLIENTS
nl <(grep 'synced_blocks' $RANDFILE | sed -e 's/.*: /%/' -e 's/\/\"//' -e 's/,//') > $SYNCED_BLOCKS
nl <(grep 'startingheight' $RANDFILE | sed -e 's/.*: /%/' -e 's/\/\"//' -e 's/,//') > $STARTINGHEIGHT

# join results and present as a table
# % is column separator
(\
    echo "#%client%ver%location%startingheight%synced_blocks"; \
    echo "-%------%---%--------%--------------%-------------"; \
    join <( join $CLIENTS <( join <(nl $GEOFILE) $STARTINGHEIGHT ) ) $SYNCED_BLOCKS; \
) > $TABLE
cat $TABLE | column -t -s'%' > $OUTFILE


if [ -z $HTML ]
then
    cat $OUTFILE
    echo
    echo "local block count: " $(bitcoin-cli getblockcount)
else
    cat $TABLE | awk 'BEGIN{print "<table>"; FS = "%" } {print "<tr>";for(i=1;i<=NF;i++)print "<td>" $i"</td>";print "</tr>"} END{print "</table>"}'
    echo
    echo "<table>"
    echo "<td>local block count</td><td>" $(bitcoin-cli getblockcount) "</td>"
    echo "</table>"
fi

rm $RANDFILE
rm $GEOFILE
rm $CLIENTS
rm $STARTINGHEIGHT
rm $SYNCED_BLOCKS
rm $TABLE
rm $OUTFILE

